=========================================================================================================================================================================
HOW TO CODE IN HTML/CSS/PHP/JAVASCRIPT 

This is just a small introduction, but there's a lot on various websites such as w3schools (pretty good for syntax and basic things),
and StackOverFlow for some more specific things. w3schools is your friend for learning basic HTML and CSS. They aren't difficult at
all. 

For PHP and JavaScript (Using the latter very seldomly here and only for very specific things), the w3school is okay, but StackOverFlow is your friend.

So Here's some HTML basics: 
==================================================================================================================================================================================================================================================================================================================================================
**HTML**
=========================================================================================================================================================================

<div id="id" class="class" style=""> CONTENT HERE </div>

<!-- STRUCTURE OF TAGS

This is a div tag, one of the most important tags. Div is essentially the equivalent of the Object type in Java. There are many tags
(e.g <p>, <h1>, etc) but I'll touch upon that in a moment. 

Above it the appropriate structure of tags (which is all HTML is, since its just markup) and it is as follows:
Open tag: <div REQUIRED
id="id": unique identifier for the tag; useful for CSS and JavaScript (harder to use in PHP I've found) OPTIONAL
class="class": The classification for the tag. Classes are usefull for CSS and JS again; Not unique, many tags can be in the same class OPTIONAL
style="" : parameters for CSS stylization; can be here or on an external CSS file or within a style tag (Requires class or id for reference) OPTIONAL
> CONTENT HERE : Close the open tag and put content inside. Can be text or other tags. Can also be dynamic with JS/PHP/CSS OPTIONAL
</div> : close tags. Some browsers will attempt to close tags for you if you forget, but they seriously effect page flow if you don't close them REQUIRED
-->

<!-- SOME TAGS

<p> : Paragraph
<h1> : Header, makes the font larger and bold. There is up to h3 as far as I'm aware and they are all different
<img src=""> : image tag, requires source directory (NOTE: requires PHP if saved locally. See the login.php page for reference)
<a href=""> : hyper-link, not underlined but default color is blue. href is the page you redirect to when clicked. If no desired redirect use "#" or exclude href

These are the basics, but I encourage you to look up a few as I don't have the time to type out all the info for tags such as:
<form> : Forms (e.g. text fields, search bars, sliders, drop down bars, etc.)
-->

<!-- COMMENTS

If you haven't guessed, the notation around these blocks of text are HTML comments. They are the same for multi and single line comments. Comments
in PHP/JS are the same as Java, and comments in CSS are only // I believe 
-->

<!-- HTML CODING PRACTICES 

There aren't many practices I'm going to ask you use for the site, other than lining up and indenting tags appropriately for easy reading 
-->

<!-- FOR REFERENCE SEE:
	 Splash.php
	 innerDashPro.php (Partials/Dash_Modules)
	 newUser.php
	 -->
================================================================================================================================================================================================================================================================================================================================================
**CSS**
========================================================================================================================================================================

CSS is one of the hard things to master. Its not particularly difficult to be decent at it, but there's a lot of different tactics and scenarios, so it not the easiest of tasks to style everything perfectly. GET SOMEWHAT ACQUANTED WITH SOME CLASSES IN THE BOOTSTRAP.CSS. ITS A GODSEND.

DEFINITION TIME: Flow of the page : order in which objects are added in HTML. If a <p> is added directly before another, it is said that the flow of the page
				 is the first paragraph tag will come above on the page, and the next will appear below or to the right of it (depending on a number of factors).

BASIC SYNTAX
 -IN HTML

 DISCLAIMER: GOING TO REFER TO TAGS AS OBJECTS FROM NOW ON!

 CSS in HTML will be in the style="" parameter of a tag.
 A sample of some CSS in HTML is as follows:
 <div class="box" style="width: 50%; height: 50%; text-align: center;"> CONTENT HERE </div>

 As you can see, its the field followed by a : then the amount/paramter followed by a ;
 ****THE SEMICOLONS AND PARENTHESIS ARE SUPER IMPORTANT IF THERE IS ANYTHING FOLLOWING THEM!****

 Some sample stylization options and probably some of my most used:

 Height : defines the height of the object. Can be defined in pixels or percentage (we are using percentages for scaling purposes) Height is really weird. It relies on 
 		  the on the height of its parent, and its parent relies on the height of its parent as so on (if we are talking solely percentages... A way I have found to fix this issue is to define the height: 100%; for all its parents to get the desired height. This is assuming that you don't care about the heights off it's parent, but that's generally not the case. There are other ways to do this, and a lot of the time its pretty specific to your code. Google helps sometimes, but other times you have to get creative.

Width   : defines the width of an object. Similar to height, but it seems that width actually just relies on its immediate parent for percentages. It seems to be fairly
		  smooth relative to height. 

text-align : Define how to align text in an object. Some parameters are center and justify. 

color : Changes color of the font (Either use hexcodes or common color strings)

background-color: Works the same as color except its for the background of a page 

font-weight : Define how the font looks. Bold is a parameter (can also be defined in HTML by surrounding desired word in <strong></strong> tags)

padding : How much padding an object has around its sides. Use small pixel amounts here. Generally try not to use padding, but sometimes there is no other choice.
		  If you use padding : 5px, it puts a 5px padding on all sides.
		  padding-top : 5px puts a 5 pixel padding on the top of the object

margin : Similar to padding, except it moves the object X% or px from its original location
		 For example margin-left: 15% will move the object 15% to the left of its original location. Use the inspect element on your browser for references here.

border : border: 1px solid will give you a one pixel solid and black border.

border-radius: Choose some small pixel amount and it will curve the border at its edges accordingly.

position : Probably the most important one to wrap your head around. There are relative, absolute, static, and fixed position. I've only been using static (default), 
		   relative, and absolute. Fixed I haven't really found a use for except for the navbar on the top and bottom. Absolute position means that any stylization is relative to the top left hand corner of the screen. Relative is relative to where the object is in the flow of the page. A little tricky, but relative is the way to go most of the time as it scales well. Absolutes the second go to, but I try to avoid it if at all possible. If you don't declare a position it is static by default, meaning its where its supposed to be as defined by the flow of the page. 


Those are some good basics, but some others to learn elsewhere are: 

z-index: defines which 'plane' and object sits on. A little difficult to master, but useful for putting stuff in foreground/background.
rgba: defines the rgb color as well as opacity. Good for alternative for not dealing with z-indexes if used correctly. 


BASIC SYNTAX
-IN CSS

Almost the same as in HTML except its in its own file:

body, html, p {
	height: 100%;
	width: 100%;
}

You can have many objects, id's, and classes for each block of CSS. In this case, the CSS will apply to both the body, html, and paragraph tags. Semicolons are super
important here. CSS won't work if you forget them and will not throw errors!

If you want to reference a class or id, use the following syntax

.class, #id {}

you need the . for classes and # for id's

HOW CSS APPLIES IN HTML VIA EXTERNAL CSS

To use external css on our site, you will need to code the following in HTML (NOTE ALL RENDERING PAGES ARE .PHP BUT CONTAIN MOSTLY HTML AND CSS):
<style>
<?php include 'directory/file.css'; ?>
</style>

CODING PRACTICES:

All I can say here is don't get lazy with the CSS. The HTML/PHP/JS can be poorly writen, but the CSS is the stylization. Please follow these guidelines:

1) Whenever there is more than one or two parameters for styling in a HTML tag, please move make a new class for the tag and move the CSS externally.
	-for example <div style="width: 100%; height: 100%;"> should be <div class="class"> where the stylization is in an accompanying CSS file.
2) Whenever possible please alter all objects in the same row and columns with each other. Center where appropriate as well (CENTERING IS FUCKING HARD SOMETIMES)
3) Avoid use of id's if at all possible unless you think we will need for JS/PHP purposes. It is easy to make a class and apply it to other tags if needed.
	- ID's are useful if for example we need to adjust the play number when the play button is pressed in real time. We can grab the ID in JS and alter its innerHTML.
4) Whenever possible, combine any objects in the same row in one big div wrapper
5) Ask me for help if you need it!
6) Get somewhat acquanted with the bootstrap.css we are using. It has a lot of nice classes for us to use. I use a lot of them. 


FOR REFERENCE SEE:
profile.css
bootstrap.css
splash.css

========================================================================================================================================================================
========================================================================================================================================================================
***PHP***
========================================================================================================================================================================

PHP is the scripting language we are primarily using. PHP is great for retrieving data from the data base and grabbing user input from HTML forms. PHP is not great at
getting information about objects in the page. Fortunately JS is great at that, but we aren't in too dire need for that here. I will briefly touch apon JS in the next
section. 

BASIC SYNTAX:

<?php 
STUFF AND THINGS
?>

Its the same syntax in PHP and HTML. You need the open and close PHP tags to code in PHP. PHP can be in the HTML or its own file. If you choose to use a separate file
for PHP (which I don't recommend, unless its a buffer page like the checkUser.php page in the Scripts folder), you need to create a PHP file in the main directory on the Edlab and you need to include it in the rendering page as such:

<?php include 'directory/script.php'; ?>

A lot of the syntax of PHP, and JS for that matter, is very similar to Java. There are obviously different method names (see the API's, they are good!) and a few syntactical things that differ (such as === which checks if value and type are the same), but its not that difficult overall. I have most likely written much fewer than 1000 lines of PHP here; most of it is HTML and CSS. 

PHP is a great way to pull from the database to pour out data onto pages. This is definitely the only real thing we are using PHP for here. Look at profile.php for how I query and dump data on the page in <div> tags. 

Some useful commands:

echo 'string' . $var : echo is the equivalent of println(). String need to be in either '' or "" (I recommend '' as its good practice you'll see later). The . is the equivalent of the + operator in the println() (it concats). $var is a variable. Variables don't have types when defined and don't need to be intialized. All variables need a $ in front at all times. Variables need no type tag when declared. For example $var; is the declaration for the variable $var. You can even echo HTML that will render, like such echo '<p>HELLO</p>'. That will echo a paragraph that will say HELLO on the page.

foreach( $Arr as $string ) : For each's have their own declaration. You pass the array or whatever first and then what you name each variable in the $Arr as whatever you want.

print_r( $arr ) : prints out all the indexes and their values of an array. 

$_GET[ 'query' ] : How I pull querystrings from the URL

$_POST[ 'FieldName'] : How to pull user entered information from forms. FieldName is the name of the appropriate field. Read up on <form> for this.

$_SESSION[ 'Username'] : How I pull the user's loginacct from the server for use in the HTML

isset( $var ) : Returns True if variable is initialized to a value. Not 100% what NULL returns, haven't tried it.

is_null( $var ) : Returns True if NULL

number_format( $val, decimal ) : If $val is a float, it will return the number to the number of decimal places defined

bcdiv( $val, $val1 ) : Division that returns a float value. 

( float )$val : To demonstate that casting works the same. See API for types, they aren't the same as Java. 

$arr = new array() : This is the declaration for arrays. You can't see them to a fixed length. You can see indexes to Strings. 

push_array( $arr, $val ) : This is how you add to an array. The first parameter is the array you wish to alter, and the next is the value to input. 

count( $arr ) : arr.length




Definitely read up on:

mysqli: We are using this for database queries, not PDO or mysql. See my checkMusic.php or search.php in the scripts folder for good reference on this.


CODING PRACTICES: 

Gonna be pretty picky here. I spent a lot of time cleaning up my code so its readable, and I'll like the rest to be the same. At the very least, use a PHP beautifier online before submitting your code to me. 

1) INDENT loops and their following code appropriately.
2) Please put spaces between parameters in functions
	- for example thing.doStuff(Thing1, Thing2) should be thing.doStuff( Thing1, Thing2 );
3)Try to name variables intuitive things (I enjoy funny names, but that doesn't help me debug your code)

SEE FOR REFERENCE:

checkMusic.php
search.php
auth.php


========================================================================================================================================================================
========================================================================================================================================================================
***JAVASCRIPT***
========================================================================================================================================================================

This is going to brief, seeing as I've only got 10 or so lines of JS on the site so far. JS really does everything that PHP does, but better IMO. JS is really good at everything PHP is bad at too, like accessing parts of the HTML. 

There are two scenarios where I use JavaScript on the site:

1) Alerts : I use this as pop-up notifications for the user. They are not found in PHP (which is so dumb), so I use JavaScript to do so.
	-IN HTML: <script type="text/javascript"> alert("Message"); </script>
	-IN PHP: You first have to close the PHP bracket (?>) and code the same thing as the HTML method. 

2) Update HTML in real time: I use this on the song page to update the HTML of plays when the music is played.
	<script type="text/javascript">
	document.getElementById( "music" ).addEventListener( 'play', incrementPlays );

	var plays = document.getElementById( "res" ).innerHTML;

	function incrementPlays() {
    	plays++;
    	document.getElementById( "res" ).innerHTML = plays;
	}
	</script>

	-document is the page. Read about DOM object is you want. Its pretty crucial if you care about learning how to do JS stuff like this and using JQuery. 
	-Basically, the getElementById selects an HTML object based on the set id you can give it. 
	-innerHTML is the HTML inside the id. 
		- For id="res", res is the id of a div that displays the number of plays for the song. 
		- When a user pressed play (the EventListener), it changes the innerHTML of res to plays (variable I keep track of here). 


Not really going to go into much more detail about JS here, as I don't anticipate coding much of it, although it would have probably been a better idea from the start. Oh well. I may use some JS here and there, but I'm really trying to do as much of it in PHP as possible (not that it matters which language). If you think there is something that would be better suited for JS, try and tackle it or ask me to do it. Syntax is very similar to Java, but JavaScript is really broken on somethings (e.g. Multidimensional Arrays).

========================================================================================================================================================================

PAGE DESIGN: 

PAGE DESIGN IS CRUCIAL HERE, SEE OTHERS FOR REFERENCE.

When making a page that will render: 
1)Use php to include the appropriate header, navbar, sidebar (if applicable), and bottombar
2)Use php to include any scripts that may need to run on the page
3)Use php to include any CSS that is needed for the page. 
	-Header contains the main CSS files. 

